package service

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/tsongpon/backend-challenge-2019/model"
	"github.com/tsongpon/backend-challenge-2019/query"
	"github.com/tsongpon/backend-challenge-2019/report"
)

// start mocking book repository //
type MockBookRepository struct {
	mock.Mock
}

func (m *MockBookRepository) GetBook(id string) (*model.Book, error) {
	args := m.Called(id)
	return args.Get(0).(*model.Book), args.Error(1)
}

// CreateBook create new book in database
func (m *MockBookRepository) CreateBook(b model.Book) (*model.Book, error) {
	args := m.Called(b)
	return args.Get(0).(*model.Book), args.Error(1)
}

func (m *MockBookRepository) UpdateBook(b model.Book) (*model.Book, error) {
	args := m.Called(b)
	return args.Get(0).(*model.Book), args.Error(1)
}

func (m *MockBookRepository) QueryBook(q query.BookQuery) ([]model.Book, error) {
	args := m.Called(q)
	return args.Get(0).([]model.Book), args.Error(1)
}

func (m *MockBookRepository) CountBook(q query.BookQuery) (int, error) {
	args := m.Called(q)
	return args.Get(0).(int), args.Error(1)
}

func (m *MockBookRepository) DeleteBook(id string) error {
	args := m.Called(id)
	return args.Error(0)
}

func (m *MockBookRepository) GetBestSaller() ([]report.BestSallerBook, error) {
	args := m.Called()
	return args.Get(0).([]report.BestSallerBook), args.Error(1)
}

func (m *MockBookRepository) GetBestSallerByCategory() ([]report.BestSallerCategory, error) {
	args := m.Called()
	return args.Get(0).([]report.BestSallerCategory), args.Error(1)
}

// end mocking book repository //

func TestCreate(t *testing.T) {
	now := time.Now()
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := model.Book{
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		Version:        1,
	}
	createdBook := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}

	mockRepo := new(MockBookRepository)
	mockRepo.On("CreateBook", book).Return(&createdBook, nil)
	mockRepo.On("GetBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(&createdBook, nil)

	sev := NewBookService(mockRepo)
	created, err := sev.Create(book)

	assert.Nil(t, err, "should not get any error")
	assert.Equal(t, "a432eee1-be54-44e6-a5ef-8a0455306f4f", created.ID, "created book should have autogenerated ID")
	assert.Equal(t, created.CreatedTime, &now, "CreatedTime should be the one that return from repo")
	assert.Equal(t, created.ModifiedTime, &now, "ModifiedTime should be the one that return from repo")
	assert.Equal(t, 1, created.Version, "Version should be the one that return from repo")
	mockRepo.AssertExpectations(t)
}

func TestGetBook(t *testing.T) {
	now := time.Now()
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}

	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(&book, nil)

	sev := NewBookService(mockRepo)

	b, err := sev.GetBook("a432eee1-be54-44e6-a5ef-8a0455306f4f")

	assert.Nil(t, err, "should not get any error")
	assert.Equal(t, "a432eee1-be54-44e6-a5ef-8a0455306f4f", b.ID, "review ID should be the one that return from repo")
	assert.Equal(t, "The Go Programming", b.Title, "title should be the one that return from repo")
	assert.Equal(t, &now, b.CreatedTime, "CreatedTime should be the one that return from repo")
	assert.Equal(t, &now, b.ModifiedTime, "ModifiedTime should be the one that return from repo")
	assert.Equal(t, 1, b.Version, "Version should be the one that return from repo")

	mockRepo.AssertExpectations(t)
}

func TestQueryBook(t *testing.T) {
	now := time.Now()
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := []model.Book{
		{
			ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
			Title:          "The Go Programming",
			Synopsis:       "All you nee to known about golang",
			ISBN10:         "0321349601",
			ISBN13:         "978-0321349606",
			Language:       "Thai",
			Publisher:      "Addison-Wesley Professional",
			Category:       "Programming",
			Edition:        "1nd Edition, Kindle Edition",
			SoldAmount:     0,
			CurrentAmount:  10,
			PaperbackPrice: &paperbackPrice,
			EbookPrice:     &ebookPrice,
			CreatedTime:    &now,
			ModifiedTime:   &now,
			Version:        1,
		},
	}

	q := query.BookQuery{Limit: 3, Offset: 10, Title: "The Go Programming"}
	mockRepo := new(MockBookRepository)
	mockRepo.On("QueryBook", q).Return(book, nil)

	sev := NewBookService(mockRepo)

	books, err := sev.QueryBook(q)
	assert.Nil(t, err, "Should not get any error")
	assert.Equal(t, 1, len(books), "result contain only one book")
	assert.Equal(t, "The Go Programming", books[0].Title, "book must be the same book return from repo")

	mockRepo.AssertExpectations(t)
}

func TestCountBook(t *testing.T) {
	q := query.BookQuery{Limit: 3, Offset: 10, Title: "The Go Programming"}
	mockRepo := new(MockBookRepository)
	mockRepo.On("CountBook", q).Return(1, nil)

	sev := NewBookService(mockRepo)
	count, err := sev.CountBook(q)
	assert.Nil(t, err, "Should not get any error")
	assert.Equal(t, 1, count, "have only one book")

	mockRepo.AssertExpectations(t)
}

func TestCountDelete(t *testing.T) {
	mockRepo := new(MockBookRepository)
	mockRepo.On("DeleteBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(nil)

	sev := NewBookService(mockRepo)
	err := sev.Delete("a432eee1-be54-44e6-a5ef-8a0455306f4f")
	assert.Nil(t, err, "Should not get any error")

	mockRepo.AssertExpectations(t)
}

func TestFillBook(t *testing.T) {
	now := time.Now()
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}
	filled := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  12,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}
	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(&book, nil)
	mockRepo.On("UpdateBook", filled).Return(&filled, nil)

	sev := NewBookService(mockRepo)
	err := sev.FillBook("a432eee1-be54-44e6-a5ef-8a0455306f4f", 2)
	assert.Nil(t, err, "should not get any error")

	mockRepo.AssertExpectations(t)
}

func TestUpdateBook(t *testing.T) {
	now := time.Now()
	updatedTime := now.AddDate(0, 1, 0)
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}

	updated := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &updatedTime,
		Version:        2,
	}

	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(&updated, nil)
	mockRepo.On("UpdateBook", book).Return(&updated, nil)

	sev := NewBookService(mockRepo)
	result, err := sev.Update(book)
	assert.Nil(t, err, "should not get any error")
	assert.Equal(t, "a432eee1-be54-44e6-a5ef-8a0455306f4f", result.ID)
	assert.Equal(t, 2, result.Version)

	mockRepo.AssertExpectations(t)
}

func TestSallBook(t *testing.T) {
	now := time.Now()
	paperbackPrice := 1353.29
	ebookPrice := 1100.00
	book := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     0,
		CurrentAmount:  10,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}
	sold := model.Book{
		ID:             "a432eee1-be54-44e6-a5ef-8a0455306f4f",
		Title:          "The Go Programming",
		Synopsis:       "All you nee to known about golang",
		ISBN10:         "0321349601",
		ISBN13:         "978-0321349606",
		Language:       "Thai",
		Publisher:      "Addison-Wesley Professional",
		Category:       "Programming",
		Edition:        "1nd Edition, Kindle Edition",
		SoldAmount:     2,
		CurrentAmount:  8,
		PaperbackPrice: &paperbackPrice,
		EbookPrice:     &ebookPrice,
		CreatedTime:    &now,
		ModifiedTime:   &now,
		Version:        1,
	}
	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBook", "a432eee1-be54-44e6-a5ef-8a0455306f4f").Return(&book, nil)
	mockRepo.On("UpdateBook", sold).Return(&sold, nil)

	sev := NewBookService(mockRepo)
	err := sev.SaleBook("a432eee1-be54-44e6-a5ef-8a0455306f4f", 2)
	assert.Nil(t, err, "should not get any error")

	mockRepo.AssertExpectations(t)
}

func TestGetBestSallBooks(t *testing.T) {
	rpt := []report.BestSallerBook{
		{Ttile: "Go is good", TotalSaleAmount: 5000},
		{Ttile: "NodeJS is the best", TotalSaleAmount: 50},
	}
	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBestSaller").Return(rpt, nil)

	sev := NewBookService(mockRepo)
	bsrpt, err := sev.GetBestSallBooks()
	assert.Nil(t, err, "Should not get any error")
	assert.Equal(t, 2, len(bsrpt), "report contain 2 entry")

	mockRepo.AssertExpectations(t)
}

func TestGetBestSallCategory(t *testing.T) {
	rpt := []report.BestSallerCategory{
		{Category: "Programming", TotalSaleAmount: 5000},
		{Category: "How to get rich", TotalSaleAmount: 50},
	}
	mockRepo := new(MockBookRepository)
	mockRepo.On("GetBestSallerByCategory").Return(rpt, nil)

	sev := NewBookService(mockRepo)
	bsrpt, err := sev.GetBestSallCategory()
	assert.Nil(t, err, "Should not get any error")
	assert.Equal(t, 2, len(bsrpt), "report contain 2 entry")

	mockRepo.AssertExpectations(t)
}
